#set ($hlp.conv = $hlp.createMap("boolean:boolean,float:double,decimal:double,double:double,int:int,positiveInteger:int,negativeInteger:int,nonPositiveInteger:int,nonNegativeInteger:int,long:int,integer:int,short:int,byte:int,unsignedLong:int,unsignedInteger:int,unsignedShort:int,unsignedByte:int,string:String,anyURI:String,normalizedString:String,token:String,language:String,date:java.util.Date,dateTime:java.util.Date,duration:java.util.Date,time:java.util.Date,AID:jade.core.AID,AgentIdentifier:jade.core.AID,AgentAction:jade.content.AgentAction,Concept:jade.content.Concept,Predicate:jade.content.Predicate"))
#set ($hlp.defaultParent = "Concept")
#if (! $hlp.isBasicClass($cls))

#set ($path = "${out}${hlp.packageToPath($pkg)}${cls.clsName}Impl.java")

#if (! $skipHeader)
package $pkg;
#end

public class ${cls.clsName}Impl implements ${cls.clsName} {

    #foreach ($prop in $hlp.listAllProperties($cls, $ont, []))
        #if ($prop.maxCardinality == 1) #set ($range = $hlp.convertClsName($prop.range))
        #else   #set ($range = "jade.util.leap.List") #end

        $range $prop.objName;
        public $range get${prop.clsName}() { return $prop.objName; }
        public void set${prop.clsName}($range $prop.objName) { this.$prop.objName = $prop.objName; }

    #end

}
#end
